import warnings
import pandas as pd
import numpy as np
import streamlit as st
from pathlib import Path
import matplotlib.pyplot as plt
import socceraction.atomic.spadl as atomicspadl

import futmetria
from vaep import vaep

warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)

st.set_page_config(layout="wide", page_title="An√°lise de Futebol com VAEP")

BASE_DIR = Path(__file__).resolve().parent
DATA_DIR = BASE_DIR / "dados"
MODELS_DIR = BASE_DIR / "modelos"

EVENTS_FILE = "events_England.json"
MATCHES_FILE = "matches_England.json"
PLAYERS_FILE = "players.json"
SPADL_CSV_FILE = "wyscount_england_events_spadl.csv"
MODELS_PKL_FILE = "modelos.pkl"

@st.cache_data(show_spinner="Carregando e processando dados de eventos...")
def load_and_process_event_data():
    events_path = DATA_DIR / EVENTS_FILE
    matches_path = DATA_DIR / MATCHES_FILE
    spadl_csv_path = DATA_DIR / SPADL_CSV_FILE

    if not events_path.is_file():
        st.error(f"Arquivo de eventos n√£o encontrado: '{EVENTS_FILE}' em '{DATA_DIR}'.")
        st.stop()
    if not matches_path.is_file():
        st.error(f"Arquivo de partidas n√£o encontrado: '{MATCHES_FILE}' em '{DATA_DIR}'.")
        st.stop()

    events = futmetria.load_events(events_path)
    matches = futmetria.load_matches(matches_path)

    if spadl_csv_path.is_file():
        st.info("Carregando dados SPADL pr√©-processados do arquivo CSV...")
        spadl_df = pd.read_csv(spadl_csv_path)
    else:
        st.warning("Primeiro processamento: Convertendo eventos para o formato SPADL (isso pode levar um tempo)...")
        spadl_df = futmetria.spadl_transform(events, matches)
        spadl_df.to_csv(spadl_csv_path, index=False)
        st.success("Dados SPADL transformados e salvos!")

    atomic_spadl_df = atomicspadl.convert_to_atomic(spadl_df)
    actions = futmetria.gera_a(atomic_spadl_df)
    eventVaep = vaep(spadl_df)

    aVaep = actions.merge(
        eventVaep[["original_event_id", "vaep_value"]],
        on="original_event_id",
        how="left",
    )
    return aVaep

@st.cache_data(show_spinner="Carregando dados de jogadores...")
def load_players_data():
    players_path = DATA_DIR / PLAYERS_FILE
    if not players_path.is_file():
        st.error(f"Arquivo de jogadores n√£o encontrado: '{PLAYERS_FILE}' em '{DATA_DIR}'.")
        st.stop()

    players = pd.read_json(players_path)
    players = players[["wyId", "firstName", "lastName"]].copy()
    players["jogNome"] = players["firstName"] + " " + players["lastName"]
    players = players.drop(columns=["firstName", "lastName"])
    players = players.rename(columns={"wyId": "player_id"})
    players["jogNome"] = players["jogNome"].apply(
        lambda x: x.encode().decode("unicode_escape")
    )
    return players

@st.cache_resource(show_spinner="Carregando modelos de VAEP...")
def load_ml_models():
    model_path = MODELS_DIR / MODELS_PKL_FILE
    if not model_path.is_file():
        st.error(f"Arquivo de modelo n√£o encontrado: '{MODELS_PKL_FILE}' em '{MODELS_DIR}'. Certifique-se de que o modelo foi treinado e salvo.")
        st.stop()
    return futmetria.carregar_modelos(model_path)

@st.cache_data(show_spinner="Gerando rankings...")
def calculate_player_rankings(_modelos, _aVaep, _players_df):
    rankings = futmetria.get_players_ranking_for_models(_modelos, _aVaep)
    return rankings

# --- CARREGAMENTO GLOBAL DE DADOS E MODELOS ---
# Estas fun√ß√µes ser√£o executadas uma vez (gra√ßas ao cache) quando o aplicativo iniciar.
aVaep_global = load_and_process_event_data()
players_df_global = load_players_data()
modelos_global = load_ml_models()
if modelos_global is None:
    st.error("Modelos essenciais n√£o puderam ser carregados. Verifique os arquivos do modelo.")
    st.stop()
rankings_global = calculate_player_rankings(modelos_global, aVaep_global, players_df_global)
# --- FIM DO CARREGAMENTO GLOBAL ---


st.sidebar.title("Navega√ß√£o")
if 'page' not in st.session_state:
    st.session_state.page = 'home'

if st.sidebar.button("P√°gina Inicial"):
    st.session_state.page = 'home'
if st.sidebar.button("üëïAn√°lise de Jogadores"):
    st.session_state.page = 'player_analysis'


if st.session_state.page == 'home':
    st.title("‚öΩCi√™ncia ¬†de Dados Aplicada ao Futebol")
    st.markdown("---")
    st.header("Estrat√©gias de Times e Detec√ß√£o de Padr√µes de Jogo")
    st.write("""
    A metodologia VAEP (Valuing Actions by Estimating Probabilities) √© uma abordagem avan√ßada para avaliar a contribui√ß√£o de cada a√ß√£o individual de um jogador de futebol para o resultado final de uma partida. Ao contr√°rio de m√©tricas tradicionais que apenas contam eventos (passes, desarmes, chutes), o VAEP atribui um valor a cada a√ß√£o com base em como ela muda a probabilidade de o time marcar um gol ou sofrer um gol.

    **Como funciona:**

    1.  **Eventos para SPADL:** Os dados brutos de eventos do futebol (como os fornecidos pelo StatsBomb) s√£o convertidos para o formato SPADL (Space-adjusted Player Action Data Language). Este formato padroniza as a√ß√µes e suas coordenadas no campo.
    2.  **A√ß√µes At√¥micas:** As a√ß√µes SPADL s√£o decompostas em "a√ß√µes at√¥micas" mais granulares (por exemplo, um passe bem-sucedido pode ser decomposto em "recep√ß√£o" e "passe").
    3.  **Modelagem de Probabilidades:** Modelos de Machine Learning (geralmente redes neurais ou modelos de regress√£o) s√£o treinados para prever a probabilidade de um time marcar ou sofrer um gol a partir de qualquer estado do jogo (posi√ß√£o da bola, jogadores, etc.).
    4.  **C√°lculo do VAEP:** Para cada a√ß√£o, o valor VAEP √© calculado como a diferen√ßa entre a probabilidade de gol (ou n√£o sofrer gol) *ap√≥s* a a√ß√£o e a probabilidade de gol *antes* da a√ß√£o.
        * Um passe que abre a defesa e aumenta drasticamente a chance de gol ter√° um VAEP alto e positivo.
        * Um passe errado que resulta em perda de posse e aumenta a chance do advers√°rio marcar ter√° um VAEP negativo.
        * Um desarme crucial na defesa ter√° um VAEP positivo (reduz a chance do advers√°rio marcar).
    5.  **An√°lise de Clusters:** As a√ß√µes dos jogadores s√£o agrupadas em clusters com base em suas caracter√≠sticas espaciais e contextuais. Isso permite identificar padr√µes de jogo e as "zonas de influ√™ncia" onde os jogadores s√£o mais eficazes em diferentes tipos de a√ß√µes.
    6.  **Ranking de Jogadores:** Os jogadores s√£o ranqueados com base na soma ou m√©dia de seus valores VAEP, ou na sua contribui√ß√£o em diferentes tipos de a√ß√µes e clusters, fornecendo uma vis√£o mais profunda de sua performance.

    **Benef√≠cios do VAEP:**

    * **Avalia√ß√£o Hol√≠stica:** Valoriza todas as a√ß√µes, n√£o apenas as que resultam diretamente em gols.
    * **Contextualiza√ß√£o:** Leva em conta a situa√ß√£o do jogo, a posi√ß√£o no campo e a press√£o dos advers√°rios.
    * **Identifica√ß√£o de Talentos:** Ajuda a identificar jogadores que contribuem significativamente para o time, mesmo que n√£o apare√ßam nas estat√≠sticas tradicionais de gols e assist√™ncias.
    """)
    st.markdown("---")
    st.caption("Desenvolvido para an√°lise de futebol com dados StatsBomb e m√©tricas VAEP.")

elif st.session_state.page == 'player_analysis':
    st.title("‚öΩ An√°lise de A√ß√µes e Ranking de Jogadores")
    st.markdown("---")

    st.header("üìä Top Jogadores por VAEP")

    percentile_threshold = st.sidebar.slider(
        "Selecione o Percentil para Filtrar:",
        min_value=0.01,
        max_value=0.99,
        value=0.95,
        step=0.01,
        help="Define o limiar de VAEP para considerar os 'melhores' jogadores."
    )

    overall_best_players_display = futmetria.rank_players_overall(
        rankings_global, # Usando a vari√°vel global
        modelos_global, # Usando a vari√°vel global
        percentile=percentile_threshold,
    )
    player_ranking_df = futmetria.create_player_ranking_df(
        overall_best_players_display,
        players_df_global, # Usando a vari√°vel global
    )

    if not player_ranking_df.empty:
        columns_to_display = [
            "rank",
            "jogNome",
            "player_id",
            "clusters_count",
            "clusters_percentage",
        ]

        display_df = player_ranking_df.copy()
        valid_columns_to_display = [col for col in columns_to_display if col in display_df.columns]
        display_df = display_df[valid_columns_to_display]

        st.dataframe(display_df, use_container_width=True)

        st.markdown(f"**Total de jogadores no ranking (acima do percentil {percentile_threshold*100:.0f}%):** {len(player_ranking_df)}")

        st.markdown("---")

        st.subheader("üîç Detalhes de Jogador Individual")

        player_names = ["Selecione um jogador..."] + sorted(player_ranking_df["jogNome"].tolist())
        selected_player_name = st.selectbox("Escolha um jogador para ver os detalhes:", player_names)

        if selected_player_name != "Selecione um jogador...":
            selected_player_row = player_ranking_df.loc[player_ranking_df["jogNome"] == selected_player_name].iloc[0]

            st.write(f"### Detalhes de {selected_player_name}")
            st.write(f"**ID do Jogador:** {selected_player_row['player_id']}")
            st.write(f"**Rank:** {selected_player_row['rank']}")
            st.write(f"**Contagem de Clusters:** {selected_player_row['clusters_count']}")
            st.write(f"**Porcentagem de Clusters:** {selected_player_row['clusters_percentage']:.2f}%")

            st.subheader(f"üìà Contribui√ß√£o de A√ß√µes de {selected_player_name} por Tipo")

            all_model_names = [model.name for model in modelos_global if hasattr(model, 'name')]

            available_actions_for_player = []
            if isinstance(selected_player_row.get("clusters"), dict):
                for model_name in all_model_names:
                    if model_name in selected_player_row["clusters"]:
                        if selected_player_row["clusters"][model_name]:
                            available_actions_for_player.append(model_name)

            available_actions_for_player = sorted(available_actions_for_player)

            default_selection = ["receival"] if "receival" in available_actions_for_player else []

            if available_actions_for_player:
                selected_action_types = st.multiselect(
                    "Selecione o(s) tipo(s) de a√ß√£o para plotar:",
                    options=available_actions_for_player,
                    default=default_selection,
                    help="Cada tipo de a√ß√£o corresponde a um modelo e ser√° plotado em um gr√°fico separado."
                )

                if selected_action_types:
                    player_figures = futmetria.plot_player_rankings(
                        selected_player_row,
                        modelos_global,
                        num_players=len(player_ranking_df),
                        wanted_actions=selected_action_types,
                    )

                    if player_figures:
                        for action_type, fig_plot in player_figures.items():
                            st.write(f"#### Gr√°fico para: {action_type}")
                            st.pyplot(fig_plot)
                            plt.close(fig_plot)
                    else:
                        st.warning("N√£o foi poss√≠vel gerar gr√°ficos para os tipos de a√ß√£o selecionados com este jogador.")
                else:
                    st.info("Por favor, selecione um ou mais tipos de a√ß√£o para visualizar o gr√°fico.")
            else:
                st.info("Este jogador n√£o possui dados para gerar gr√°ficos de a√ß√µes ou os dados est√£o vazios para todos os tipos de a√ß√£o.")
                st.warning("Experimente selecionar outro jogador.")

        else:
            st.info("Selecione um jogador na caixa acima para ver seus detalhes e contribui√ß√£o de a√ß√µes.")

    else:
        st.warning("Nenhum jogador encontrado para o percentil selecionado. Tente ajustar o percentil na barra lateral.")

    st.markdown("---")
    st.caption("Desenvolvido para an√°lise de futebol com dados StatsBomb e m√©tricas VAEP.")
